{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireWildcard = require(\"@babel/runtime-corejs2/helpers/interopRequireWildcard\");\n\nvar _interopRequireDefault = require(\"@babel/runtime-corejs2/helpers/interopRequireDefault\");\n\nvar _Object$defineProperty = require(\"@babel/runtime-corejs2/core-js/object/define-property\");\n\n_Object$defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nexports.default = void 0;\n\nvar _react = _interopRequireWildcard(require(\"react\"));\n\nvar _extends2 = _interopRequireDefault(require(\"@babel/runtime-corejs2/helpers/extends\"));\n\nvar _getDisplayName = _interopRequireDefault(require(\"../../utils/getDisplayName\"));\n\nvar _jsxFileName = \"/home/arma/My/Software/Projects/Story_SSR_Custom/containers/Hocs/WithToggle.jsx\";\n\nconst withToggle = WrappedComponent => {\n  const HOC = props => {\n    const [isOpen, setIsOpen] = (0, _react.useState)(false);\n\n    const handleToggleClick = () => setIsOpen(!isOpen);\n\n    return _react.default.createElement(WrappedComponent, (0, _extends2.default)({}, props, {\n      handleToggleClick: handleToggleClick,\n      isOpen: isOpen,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 11\n      },\n      __self: void 0\n    }));\n  };\n\n  HOC.displayName = `withToggle(${(0, _getDisplayName.default)(WrappedComponent)})`;\n  return HOC;\n};\n\nvar _default = withToggle;\nexports.default = _default;","map":{"version":3,"sources":["/home/arma/My/Software/Projects/Story_SSR_Custom/containers/Hocs/WithToggle.jsx"],"names":["withToggle","WrappedComponent","HOC","props","isOpen","setIsOpen","handleToggleClick","displayName"],"mappings":";;;;;;;;;;;;;;AAAA;;;;AACA;;;;AAEA,MAAMA,UAAU,GAAGC,gBAAgB,IAAI;AACtC,QAAMC,GAAG,GAAGC,KAAK,IAAI;AACpB,UAAM,CAACC,MAAD,EAASC,SAAT,IAAsB,qBAAS,KAAT,CAA5B;;AAEA,UAAMC,iBAAiB,GAAG,MAAMD,SAAS,CAAC,CAACD,MAAF,CAAzC;;AAEA,WACC,6BAAC,gBAAD,6BAAsBD,KAAtB;AAA6B,MAAA,iBAAiB,EAAEG,iBAAhD;AAAmE,MAAA,MAAM,EAAEF,MAA3E;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OADD;AAGA,GARD;;AAUAF,EAAAA,GAAG,CAACK,WAAJ,GAAmB,cAAa,6BAAeN,gBAAf,CAAiC,GAAjE;AAEA,SAAOC,GAAP;AACA,CAdD;;eAgBeF,U","sourcesContent":["import { useState } from \"react\";\nimport getDisplayName from \"utils/getDisplayName\";\n\nconst withToggle = WrappedComponent => {\n\tconst HOC = props => {\n\t\tconst [isOpen, setIsOpen] = useState(false);\n\n\t\tconst handleToggleClick = () => setIsOpen(!isOpen);\n\n\t\treturn (\n\t\t\t<WrappedComponent {...props} handleToggleClick={handleToggleClick} isOpen={isOpen} />\n\t\t);\n\t};\n\n\tHOC.displayName = `withToggle(${getDisplayName(WrappedComponent)})`;\n\n\treturn HOC;\n};\n\nexport default withToggle;\n"]},"metadata":{},"sourceType":"script"}