{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime-corejs2/helpers/interopRequireDefault\");\n\nvar _interopRequireWildcard = require(\"@babel/runtime-corejs2/helpers/interopRequireWildcard\");\n\nvar _Object$defineProperty = require(\"@babel/runtime-corejs2/core-js/object/define-property\");\n\n_Object$defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nexports.default = void 0;\n\nvar _react = _interopRequireWildcard(require(\"react\"));\n\nvar _slicedToArray2 = _interopRequireDefault(require(\"@babel/runtime-corejs2/helpers/slicedToArray\"));\n\nvar _clsx = _interopRequireDefault(require(\"clsx\"));\n\nvar _Block = require(\"../Block\");\n\nrequire(\"./ClickShow.scss\");\n\nconst ClickShow = (_ref) => {\n  let children = _ref.children,\n      Component = _ref.Component,\n      className = _ref.className,\n      childClassName = _ref.childClassName,\n      onChange = _ref.onChange,\n      options = _ref.options;\n\n  const _useState = (0, _react.useState)(false),\n        _useState2 = (0, _slicedToArray2.default)(_useState, 2),\n        isShow = _useState2[0],\n        setIsShow = _useState2[1];\n\n  const handleClose = () => {\n    document.removeEventListener(\"click\", handleClose);\n    setIsShow(false);\n  };\n\n  const handleOpen = () => {\n    document.addEventListener(\"click\", handleClose);\n    setIsShow(true);\n  };\n\n  const handleToggle = () => isShow ? handleClose() : handleOpen();\n\n  (0, _react.useEffect)(() => () => document.removeEventListener(\"click\", handleClose), []);\n  const compositeClassName = (0, _clsx.default)(\"ClickShow\", {\n    [className]: className,\n    opened: isShow\n  });\n  return _react.default.createElement(\"div\", {\n    className: compositeClassName,\n    onClick: handleToggle\n  }, children, _react.default.createElement(_Block.BlockContainer, {\n    className: (0, _clsx.default)(\"ClickShow_Element\", childClassName, {\n      _sl: isShow && childClassName\n    })\n  }, _react.default.createElement(Component, {\n    className: \"ClickShow_Element_Component\",\n    handleChange: onChange,\n    options: options\n  })));\n};\n\nvar _default = ClickShow;\nexports.default = _default;","map":{"version":3,"sources":["/home/arma/My/Software/Projects/Story_SSR_Custom/components/ShowUp/ClickShow.jsx"],"names":["ClickShow","children","Component","className","childClassName","onChange","options","isShow","setIsShow","handleClose","document","removeEventListener","handleOpen","addEventListener","handleToggle","compositeClassName","opened","_sl"],"mappings":";;;;;;;;;;;;;;AAAA;;;;AAEA;;AACA;;AAEA;;AAEA,MAAMA,SAAS,GAAG,UAOZ;AAAA,MANLC,QAMK,QANLA,QAMK;AAAA,MALLC,SAKK,QALLA,SAKK;AAAA,MAJLC,SAIK,QAJLA,SAIK;AAAA,MAHLC,cAGK,QAHLA,cAGK;AAAA,MAFLC,QAEK,QAFLA,QAEK;AAAA,MADLC,OACK,QADLA,OACK;;AAAA,oBACuB,qBAAS,KAAT,CADvB;AAAA;AAAA,QACEC,MADF;AAAA,QACUC,SADV;;AAGL,QAAMC,WAAW,GAAG,MAAM;AACzBC,IAAAA,QAAQ,CAACC,mBAAT,CAA6B,OAA7B,EAAsCF,WAAtC;AACAD,IAAAA,SAAS,CAAC,KAAD,CAAT;AACA,GAHD;;AAKA,QAAMI,UAAU,GAAG,MAAM;AACxBF,IAAAA,QAAQ,CAACG,gBAAT,CAA0B,OAA1B,EAAmCJ,WAAnC;AACAD,IAAAA,SAAS,CAAC,IAAD,CAAT;AACA,GAHD;;AAKA,QAAMM,YAAY,GAAG,MAAOP,MAAM,GAAGE,WAAW,EAAd,GAAmBG,UAAU,EAA/D;;AAEA,wBAAU,MAAM,MAAMF,QAAQ,CAACC,mBAAT,CAA6B,OAA7B,EAAsCF,WAAtC,CAAtB,EAA0E,EAA1E;AACA,QAAMM,kBAAkB,GAAG,mBAAK,WAAL,EAAkB;AAC5C,KAACZ,SAAD,GAAaA,SAD+B;AAE5Ca,IAAAA,MAAM,EAAET;AAFoC,GAAlB,CAA3B;AAKA,SACC;AAAK,IAAA,SAAS,EAAEQ,kBAAhB;AAAoC,IAAA,OAAO,EAAED;AAA7C,KACEb,QADF,EAEC,6BAAC,qBAAD;AAAgB,IAAA,SAAS,EAAE,mBAAK,mBAAL,EAA0BG,cAA1B,EAA0C;AAAEa,MAAAA,GAAG,EAAEV,MAAM,IAAIH;AAAjB,KAA1C;AAA3B,KACC,6BAAC,SAAD;AACC,IAAA,SAAS,EAAC,6BADX;AAEC,IAAA,YAAY,EAAEC,QAFf;AAGC,IAAA,OAAO,EAAEC;AAHV,IADD,CAFD,CADD;AAYA,CAxCD;;eA8CeN,S","sourcesContent":["import { useState, useEffect } from \"react\";\nimport { string } from \"prop-types\";\nimport clsx from \"clsx\";\nimport { BlockContainer } from \"components/Block\";\n\nimport \"./ClickShow.scss\";\n\nconst ClickShow = ({\n\tchildren,\n\tComponent,\n\tclassName,\n\tchildClassName,\n\tonChange,\n\toptions\n}) => {\n\tconst [isShow, setIsShow] = useState(false);\n\n\tconst handleClose = () => {\n\t\tdocument.removeEventListener(\"click\", handleClose);\n\t\tsetIsShow(false);\n\t};\n\n\tconst handleOpen = () => {\n\t\tdocument.addEventListener(\"click\", handleClose);\n\t\tsetIsShow(true);\n\t};\n\n\tconst handleToggle = () => (isShow ? handleClose() : handleOpen());\n\n\tuseEffect(() => () => document.removeEventListener(\"click\", handleClose), []);\n\tconst compositeClassName = clsx(\"ClickShow\", {\n\t\t[className]: className,\n\t\topened: isShow\n\t});\n\n\treturn (\n\t\t<div className={compositeClassName} onClick={handleToggle}>\n\t\t\t{children}\n\t\t\t<BlockContainer className={clsx(\"ClickShow_Element\", childClassName, { _sl: isShow && childClassName })}>\n\t\t\t\t<Component\n\t\t\t\t\tclassName=\"ClickShow_Element_Component\"\n\t\t\t\t\thandleChange={onChange}\n\t\t\t\t\toptions={options}\n\t\t\t\t/>\n\t\t\t</BlockContainer>\n\t\t</div>\n\t);\n};\n\nClickShow.propTypes = {\n\tclassName: string\n};\n\nexport default ClickShow;\n"]},"metadata":{},"sourceType":"script"}